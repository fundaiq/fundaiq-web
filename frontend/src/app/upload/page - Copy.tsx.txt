'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useGlobalStore } from "@/store/globalStore";
import { Button } from "@/components/ui/button";

export default function UploadPage() {
  const [file, setFile] = useState<File | null>(null);
  const [ticker, setTicker] = useState("");
  const [tickersList, setTickersList] = useState<string[]>([]);
  const [filteredTickers, setFilteredTickers] = useState<string[]>([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [status, setStatus] = useState("");

  const setAssumptions = useGlobalStore((state) => state.setAssumptions);
  const setMetrics = useGlobalStore((state) => state.setMetrics);
  const setCompanyInfo = useGlobalStore((state) => state.setCompanyInfo);
  const setRawYahooData = useGlobalStore((state) => state.setRawYahooData);
  const rawYahoo = useGlobalStore((state) => state.raw_yahoo_data);
  const router = useRouter();

  useEffect(() => {
    const fetchTickers = async () => {
      const res = await fetch("/tickers.json");
      const data = await res.json();
      setTickersList(data);
    };
    fetchTickers();
  }, []);

  const handleTickerInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTicker(value);

    if (value.length >= 2) {
      const matches = tickersList.filter((t) =>
        t.toLowerCase().includes(value.toLowerCase())
      );
      setFilteredTickers(matches.slice(0, 10));
      setShowSuggestions(true);
    } else {
      setShowSuggestions(false);
    }
  };

  const handleTickerFetch = async () => {
    if (!ticker) return;
    setStatus("üîÑ Fetching from Yahoo...");

    try {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_BASE}/yahoo-profile/${ticker}`);
      if (!res.ok) {
        const errorText = await res.text();
        console.error("‚ùå Ticker fetch error:", errorText);
        setStatus("‚ùå Failed to fetch ticker data: " + errorText);
        return;
      }

      const data = await res.json();
      console.log("‚úÖ Yahoo profile data:", data);

      if (data.assumptions) {
        console.log("‚úÖ Yahoo Assumptions:", data.assumptions); // üëà Add this
        setAssumptions(data.assumptions);
      }

      if (data.calculated_metrics) setMetrics(data.calculated_metrics);
      if (data.company_name || data.ticker) {
        setCompanyInfo({
          name: data.company_name,
          ticker: data.ticker,
          sector: data.sector,
          description: data.description,
        });
      }

      if (data.pnl || data.balance_sheet || data.cashflow) {
        setRawYahooData({
          pnl: data.pnl,
          balance_sheet: data.balance_sheet,
          cashflow: data.cashflow,
          years: data.years,
        });
        
      }

      setStatus(`‚úÖ ${data.company_name} loaded from Yahoo Finance`);

    } catch (err) {
      console.error("‚ùå Fetch/network error:", err);
      setStatus("‚ùå Ticker fetch failed. See console.");
    }
  };

  const handleUpload = async () => {
    if (!file) return;
    setStatus("Uploading...");

    try {
      const formData = new FormData();
      formData.append("file", file);

      const res = await fetch(`${process.env.NEXT_PUBLIC_API_BASE}/upload-excel`, {
        method: "POST",
        body: formData,
      });

      if (!res.ok) {
        const errorText = await res.text();
        console.error("‚ùå Upload error:", errorText);
        setStatus("‚ùå Upload failed: " + errorText);
        return;
      }

      const data = await res.json();
      console.log("‚úÖ Upload result:", data);

      if (data.assumptions) setAssumptions(data.assumptions);
      if (data.calculated_metrics) setMetrics(data.calculated_metrics);

      setStatus("‚úÖ Data uploaded and assumptions stored.");
      router.push("/dcf");

    } catch (err) {
      console.error("‚ùå Fetch/network error:", err);
      setStatus("‚ùå Upload failed. See console.");
    }
  };

  return (
    <div className="p-6 max-w-xl mx-auto space-y-6">
      <h1 className="text-xl font-bold">üìä Company Report Generator</h1>

      <div className="space-y-2 relative z-10">
        <label className="block font-medium">Enter Yahoo Finance Ticker (e.g. TCS.NS)</label>
        <input
          type="text"
          value={ticker}
          onChange={handleTickerInput}
          onKeyDown={(e) => {
            if ((e.key === 'Enter' || e.key === 'Tab') && filteredTickers.length > 0) {
              e.preventDefault();
              setTicker(filteredTickers[0]);
              setShowSuggestions(false);
            }
          }}
          placeholder="e.g. INFY.NS"
          className="w-full border border-gray-300 px-3 py-2 rounded"
        />

        {showSuggestions && filteredTickers.length > 0 && (
          <ul className="absolute bg-white z-20 border w-full shadow mt-1 rounded max-h-60 overflow-auto">
            {filteredTickers.map((item) => (
              <li
                key={item}
                className="px-3 py-2 hover:bg-gray-100 cursor-pointer"
                onClick={() => {
                  setTicker(item);
                  setShowSuggestions(false);
                }}
              >
                <span className="font-semibold">{item}</span>
              </li>
            ))}
          </ul>
        )}

        <Button onClick={handleTickerFetch} className="mt-2">Fetch</Button>
      </div>

      <hr className="my-4" />

      <h2 className="text-lg font-semibold">üì• Upload Screener Excel File</h2>
      <input
        type="file"
        accept=".xlsx"
        onChange={(e) => setFile(e.target.files?.[0] || null)}
      />
      <Button onClick={handleUpload} disabled={!file}>
        Upload & Import
      </Button>

      <p className="text-sm text-gray-600 mt-2">{status}</p>

      {status.startsWith("üîÑ") && (
        <div className="text-sm text-blue-600 animate-pulse mt-4">Loading Yahoo data...</div>
      )}

      {!rawYahoo?.pnl && status.includes("loaded") && (
        <div className="mt-4 text-sm text-red-500">
          ‚ö†Ô∏è No Yahoo financial data available for this ticker.
        </div>
      )}
      
      {["pnl", "balance_sheet", "cashflow"].map((sectionKey) => {
        const sectionMap = {
          pnl: "üßæ Yahoo P&L (Preview)",
          balance_sheet: "üìä Yahoo Balance Sheet (Preview)",
          cashflow: "üí∞ Yahoo Cash Flow (Preview)",
        };

        const sectionData =
          rawYahoo && typeof rawYahoo[sectionKey] === "object" ? rawYahoo[sectionKey] : {};
        const years = rawYahoo?.years || [];

        if (!sectionData || Object.keys(sectionData).length === 0) return null;

        return (
          <div key={sectionKey} className="mt-6">
            <h3 className="text-md font-semibold">{sectionMap[sectionKey]}</h3>
            <table className="w-full text-sm border">
              <thead>
                <tr>
                  <th className="text-left px-2 py-1 border">Label</th>
                  {years.map((y) => (
                    <th key={y} className="px-2 py-1 border">{y}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {Object.entries(sectionData).map(([label, values]) => (
                  <tr key={label}>
                    <td className="px-2 py-1 border">{label}</td>
                    {Array.isArray(values)
                      ? values.map((v, i) => (
                          <td key={i} className="px-2 py-1 border text-right">{v}</td>
                        ))
                      : years.map((_, i) => (
                          <td key={i} className="px-2 py-1 border text-right text-gray-400">-</td>
                        ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      })}
    </div>
  );
}
